geom_alluvium(aes(fill = modules)) +
geom_stratum() +
#geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("synapse and vesicle fusion" = "#1f77b4",
"cytoskeleton" = "#ff7f0e",
"protein turnover" = "#2ca02c",
"CNS-related pathways" = "purple")) +
theme_classic() +
ggtitle("Alluvium Plot: Modules, Genes, and Canonical Pathways") +
labs(x = "Flow from Modules to DEGS to Ingenuity Canonical Pathways",
y = "Gene Modules")+
theme(axis.title.y = element_text(size = 16), # Increase Y axis label size and make it bold
plot.title = element_text(size = 18)) # Increase plot title size and make it bold
dev.off()
###
View(df_top20)
View(df_top20)
##top 20
jpeg("PLD3_PAAS_pathways_alluvium_plot_rm_Not_CNS_top_20.jpeg",width = 14, height = 10,units = "in", res=600)
ggplot(df_top20,
aes(axis1 = modules, axis2 = Molecules, axis3 = `Ingenuity Canonical Pathways`,
y = `-log(p-value)`)) +
geom_alluvium(aes(fill = modules)) +
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("synapse and vesicle fusion" = "#1f77b4",
"cytoskeleton" = "#ff7f0e",
"protein turnover" = "#2ca02c",
"CNS-related pathways" = "purple")) +
theme_classic() +
ggtitle("Alluvium Plot: Modules, Genes, and Canonical Pathways") +
labs(x = "Flow from Modules to DEGS to Ingenuity Canonical Pathways",
y = "Gene Modules")+
theme(axis.title.y = element_text(size = 16), # Increase Y axis label size and make it bold
plot.title = element_text(size = 18)) # Increase plot title size and make it bold
dev.off()
###
getwd()
jpeg("PLD3_PAAS_pathways_alluvium_plot_rm_Not_CNS_top_20_no_names.jpeg",width = 14, height = 10,units = "in", res=600)
ggplot(df_top20,
aes(axis1 = modules, axis2 = Molecules, axis3 = `Ingenuity Canonical Pathways`,
y = `-log(p-value)`)) +
geom_alluvium(aes(fill = modules)) +
geom_stratum() +
#geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("synapse and vesicle fusion" = "#1f77b4",
"cytoskeleton" = "#ff7f0e",
"protein turnover" = "#2ca02c",
"CNS-related pathways" = "purple")) +
theme_classic() +
ggtitle("Alluvium Plot: Modules, Genes, and Canonical Pathways") +
labs(x = "Flow from Modules to DEGS to Ingenuity Canonical Pathways",
y = "Gene Modules")+
theme(axis.title.y = element_text(size = 16), # Increase Y axis label size and make it bold
plot.title = element_text(size = 18)) # Increase plot title size and make it bold
dev.off()
df_top20 <- PLD3_PAAS_pathways %>%
debugSource("~/Simons Foundation Dropbox/Shanshan Qin/Projects/yifei/8_Group_Pathays_Genes.R")
debugSource("~/Simons Foundation Dropbox/Shanshan Qin/Projects/yifei/8_Group_Pathays_Genes.R")
View(PLD3_PAAS_pathways)
View(PLD3_PAAS_pathways)
subset_pathways <- PLD3_PAAS_pathways %>%
filter(modules != "Not CNS-related") %>%# Exclude "Not CNS-related"
filter(modules != "CNS-related pathways")# Exclude "CNS-related"
View(subset_pathways)
View(subset_pathways)
df_top20 <- subset_pathways %>%
arrange(desc(`-log(p-value)`)) %>%
slice_head(n = 20)
df_top20 <- df_top20 %>%
filter(!is.na(modules)) %>%
separate_rows(Molecules, sep = ",") %>%
mutate(Molecules = str_trim(Molecules),
# Merge "Alzheimer disease" into "CNS-related pathways"
modules = ifelse(modules == "Alzheimer disease", "CNS-related pathways", modules),
# Set the specified order for modules
modules = factor(modules, levels = c("synapse and vesicle fusion", "cytoskeleton", "protein turnover", "CNS-related pathways", "Not CNS-related")))
View(df_top20)
View(df_top20)
df_top20 <- df_top20 %>%
arrange(desc(`-log(p-value)`)) %>%
mutate(`Ingenuity Canonical Pathways` = factor(`Ingenuity Canonical Pathways`,
levels = unique(`Ingenuity Canonical Pathways`)))
##top 20
jpeg("PLD3_PAAS_pathways_alluvium_plot_rm_Not_CNS_top_20_no_names.jpeg",width = 14, height = 10,units = "in", res=600)
ggplot(df_top20,
aes(axis1 = modules, axis2 = Molecules, axis3 = `Ingenuity Canonical Pathways`,
y = `-log(p-value)`)) +
geom_alluvium(aes(fill = modules)) +
geom_stratum() +
#geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("synapse and vesicle fusion" = "#1f77b4",
"cytoskeleton" = "#ff7f0e",
"protein turnover" = "#2ca02c",
"CNS-related pathways" = "purple")) +
theme_classic() +
ggtitle("Alluvium Plot: Modules, Genes, and Canonical Pathways") +
labs(x = "Flow from Modules to DEGS to Ingenuity Canonical Pathways",
y = "Gene Modules")+
theme(axis.title.y = element_text(size = 16), # Increase Y axis label size and make it bold
plot.title = element_text(size = 18)) # Increase plot title size and make it bold
dev.off()
View(df_top20)
View(df_top20)
debugSource("~/Simons Foundation Dropbox/Shanshan Qin/Projects/yifei/8_Group_Pathays_Genes.R")
View(subset_pathways)
View(subset_pathways)
# Arange pathway by p-value
df_top20 <- subset_pathways %>%
arrange(desc(`-log(p-value)`)) %>%
slice_head(n = 20)
View(df_top20)
View(df_top20)
df_top20 <- df_top20 %>%
filter(!is.na(modules)) %>%
separate_rows(Molecules, sep = ",") %>%
mutate(Molecules = str_trim(Molecules),
# Merge "Alzheimer disease" into "CNS-related pathways"
modules = ifelse(modules == "Alzheimer disease", "CNS-related pathways", modules),
# Set the specified order for modules
modules = factor(modules, levels = c("synapse and vesicle fusion", "cytoskeleton", "protein turnover", "CNS-related pathways", "Not CNS-related")))
View(df_top20)
View(df_top20)
##top 20
jpeg("PLD3_PAAS_pathways_alluvium_plot_rm_Not_CNS_top_20_no_names.jpeg",width = 14, height = 10,units = "in", res=600)
ggplot(df_top20,
aes(axis1 = modules, axis2 = Molecules, axis3 = `Ingenuity Canonical Pathways`,
y = `-log(p-value)`)) +
geom_alluvium(aes(fill = modules)) +
geom_stratum() +
#geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("synapse and vesicle fusion" = "#1f77b4",
"cytoskeleton" = "#ff7f0e",
"protein turnover" = "#2ca02c",
"CNS-related pathways" = "purple")) +
theme_classic() +
ggtitle("Alluvium Plot: Modules, Genes, and Canonical Pathways") +
labs(x = "Flow from Modules to DEGS to Ingenuity Canonical Pathways",
y = "Gene Modules")+
theme(axis.title.y = element_text(size = 16), # Increase Y axis label size and make it bold
plot.title = element_text(size = 18)) # Increase plot title size and make it bold
dev.off()
###
debugSource("~/Simons Foundation Dropbox/Shanshan Qin/Projects/yifei/8_Group_Pathays_Genes.R")
# Prepare the data
PLD3_PAAS_pathways <- raw_data %>%
filter(!is.na(modules)) %>%
separate_rows(Molecules, sep = ",") %>%
mutate(Molecules = str_trim(Molecules),
# Merge "Alzheimer disease" into "CNS-related pathways"
modules = ifelse(modules == "Alzheimer disease", "CNS-related pathways", modules),
# Set the specified order for modules
modules = factor(modules, levels = c("synapse and vesicle fusion", "cytoskeleton", "protein turnover", "CNS-related pathways", "Not CNS-related")))
# Rank the Canonical Pathways by `-log(p-value)` globally
PLD3_PAAS_pathways <- PLD3_PAAS_pathways %>%
arrange(desc(`-log(p-value)`)) %>%
mutate(`Ingenuity Canonical Pathways` = factor(`Ingenuity Canonical Pathways`,
levels = unique(`Ingenuity Canonical Pathways`)))
# subset, whether or not remove CNS related
subset_pathways <- raw_data %>%
filter(modules != "Not CNS-related") %>%# Exclude "Not CNS-related"
filter(modules != "CNS-related pathways")# Exclude "CNS-related"
#
df_top20 <- subset_pathways %>%
arrange(desc(`-log(p-value)`)) %>%
slice_head(n = 20)
View(df_top20)
View(df_top20)
df_top20 <- df_top20 %>%
filter(!is.na(modules)) %>%
separate_rows(Molecules, sep = ",") %>%
filter(modules != "Not CNS-related") %>% # Exclude "Not CNS-related"
mutate(Molecules = str_trim(Molecules),
# Merge "Alzheimer disease" into "CNS-related pathways"
modules = ifelse(modules == "Alzheimer disease", "CNS-related pathways", modules),
# Set the specified order for modules
modules = factor(modules, levels = c("synapse and vesicle fusion", "cytoskeleton", "protein turnover", "CNS-related pathways", "Not CNS-related")))
df_top20 <- df_top20 %>%
arrange(desc(`-log(p-value)`)) %>%
mutate(`Ingenuity Canonical Pathways` = factor(`Ingenuity Canonical Pathways`,
levels = unique(`Ingenuity Canonical Pathways`)))
##top 20
jpeg("PLD3_PAAS_pathways_alluvium_plot_rm_Not_CNS_top_20.jpeg",width = 14, height = 10,units = "in", res=600)
ggplot(df_top20,
aes(axis1 = modules, axis2 = Molecules, axis3 = `Ingenuity Canonical Pathways`,
y = `-log(p-value)`)) +
geom_alluvium(aes(fill = modules)) +
geom_stratum() +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("synapse and vesicle fusion" = "#1f77b4",
"cytoskeleton" = "#ff7f0e",
"protein turnover" = "#2ca02c",
"CNS-related pathways" = "purple")) +
theme_classic() +
ggtitle("Alluvium Plot: Modules, Genes, and Canonical Pathways") +
labs(x = "Flow from Modules to DEGS to Ingenuity Canonical Pathways",
y = "Gene Modules")+
theme(axis.title.y = element_text(size = 16), # Increase Y axis label size and make it bold
plot.title = element_text(size = 18)) # Increase plot title size and make it bold
dev.off()
###
##top 20
jpeg("PLD3_PAAS_pathways_alluvium_plot_rm_Not_CNS_top_20_no_names.jpeg",width = 14, height = 10,units = "in", res=600)
ggplot(df_top20,
aes(axis1 = modules, axis2 = Molecules, axis3 = `Ingenuity Canonical Pathways`,
y = `-log(p-value)`)) +
geom_alluvium(aes(fill = modules)) +
geom_stratum() +
#geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
scale_fill_manual(values = c("synapse and vesicle fusion" = "#1f77b4",
"cytoskeleton" = "#ff7f0e",
"protein turnover" = "#2ca02c",
"CNS-related pathways" = "purple")) +
theme_classic() +
ggtitle("Alluvium Plot: Modules, Genes, and Canonical Pathways") +
labs(x = "Flow from Modules to DEGS to Ingenuity Canonical Pathways",
y = "Gene Modules")+
theme(axis.title.y = element_text(size = 16), # Increase Y axis label size and make it bold
plot.title = element_text(size = 18)) # Increase plot title size and make it bold
dev.off()
# Create sample data
data <- data.frame(
Measurement = c("Measurement 1", "Measurement 2", "Measurement 3"),
A = c(10, 15, 20),
B = c(12, 18, 22)
)
source("~/Simons Foundation Dropbox/Shanshan Qin/Projects/yifei/protein_compare.R")
getwd()
source("~/Simons Foundation Dropbox/Shanshan Qin/Projects/yifei/protein_compare.R")
View(data_long)
View(data_long)
source("~/Simons Foundation Dropbox/Shanshan Qin/Projects/yifei/protein_compare.R")
source("~/Simons Foundation Dropbox/Shanshan Qin/Projects/yifei/protein_compare.R")
g
# Create sample data
data <- data.frame(
Measurement = c("Measurement 1", "Measurement 2", "Measurement 3"),
A = c(10, 15, 20),
B = c(12, 18, 22)
)
# Reshape data from wide to long format
data_long <- reshape2::melt(data, id.vars = "Measurement")
# Plot
g2<-ggplot(data_long, aes(x = Measurement, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of A and B",
x = "Measurement",
y = "Value") +
theme_minimal() +
theme(legend.title = element_blank())
g2
# Create sample data
data <- data.frame(
Measurement = c("Measurement 1", "Measurement 2", "Measurement 3"),
A = c(10, 15, 20),
B = c(12, 18, 22)
)
# Calculate mean values for A and B
mean_values <- data.frame(
Variable = c("A", "B"),
Mean = c(mean(data$A), mean(data$B))
)
# Reshape data from wide to long format
data_long <- reshape2::melt(data, id.vars = "Measurement")
# Plot
g2<-ggplot(data_long, aes(x = Measurement, y = value, color = variable)) +
geom_point(size = 3) +
geom_hline(data = mean_values, aes(yintercept = Mean, color = Variable), linetype = "dashed") +
labs(title = "Comparison of A and B",
x = "Measurement",
y = "Value") +
theme_minimal() +
theme(legend.title = element_blank()) +
scale_color_manual(values = c("blue", "red"))
g2
View(data)
View(g)
View(data)
View(data_long)
View(data_long)
g3<-ggplot(data_long, aes(x=variable, y=value)) +
geom_dotplot(binaxis='y', stackdir='center')
g3
View(data)
View(data_long)
View(data_long)
install.packages("venneuler")
library(venneuler)
v <- venneuler(c(A=450, B=1800, "A&B"=230))
plot(v)
exit()
q(0)
q(())
q()
# Load ggplot2 package
library(ggplot2)
# Create sample data
data <- data.frame(
Measurement = c("Measurement 1", "Measurement 2", "Measurement 3"),
A = c(10, 15, 20),
B = c(12, 18, 22)
)
# Reshape data from wide to long format
data_long <- reshape2::melt(data, id.vars = "Measurement")
# Plot
g<-ggplot(data_long, aes(x = Measurement, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Comparison of A and B",
x = "Measurement",
y = "Value") +
theme_minimal() +
theme(legend.title = element_blank())
g
q()
library(ggplot2)
library(readxl)
library("viridis")
library("ggpubr")
# load the data
# define the function to read the data
read_data <- function(AD_file_path, target_column){
sheets_AD <- excel_sheets(AD_file_path)
volume <- numeric(0)
for (sheet in 2:length(sheets_AD)){
data <- read_excel(AD_file_path,sheet)
num_row = nrow(data)
# column names
column_index <- which(colnames(data) == target_column)
if (length(column_index) == 0) {
cat("Column not found.\n")
}
else {
volume <- c(volume, data[2:num_row,column_index+1])
}
}
volume <- unlist(volume)
return(volume)
}
### READ TWO DATASETS
AD_file_path <- "./data/Filter_AD_Paranode.xlsx"
ctr_file_path <- "./data/Fitler_Ctrl_Paranode.xlsx"
# Get sheet names
target_column <- "Volume (px³)"
AD_data <- read_data(AD_file_path,target_column)
getwd()
setwd("/Users/sqin/Documents/Python/yifei_projects/")
### READ TWO DATASETS
AD_file_path <- "./data/Filter_AD_Paranode.xlsx"
ctr_file_path <- "./data/Fitler_Ctrl_Paranode.xlsx"
# Get sheet names
target_column <- "Volume (px³)"
AD_data <- read_data(AD_file_path,target_column)
ctr_data <- read_data(ctr_file_path,target_column)
combined_volume <- c(AD_data, ctr_data)
combined_labels <- c(rep("AD", length(AD_data)), rep("Control", length(ctr_data)))
df <- data.frame(
volume = combined_volume,
source = factor(combined_labels)  # Convert to a factor
)
p = (1:1000)/1000
threshold <- 55
q_c = quantile(ctr_data[ctr_data<=threshold],p,na.rm=TRUE)
q_AD = quantile(AD_data[AD_data <= threshold],p,na.rm=TRUE)
qs = data.frame(Control = q_c, AD = q_AD, Quantile = p*100)
#plot(q_m, q_f)
new_qq <- ggplot(qs,aes(x = Control, y= AD, colour = Quantile)) + geom_point(size = 1.5) +
coord_fixed() +
xlim(0, 55) + ylim(0, 55)  +
scale_color_viridis(option = "D") +
# scale_fill_distiller(palette = "Spectral") +
geom_abline(intercept = 0, slope = 1, size = 0.5, colour = "gray") +
geom_hline(yintercept = 10,linetype = "dashed", size = 0.2) +
geom_vline(xintercept = 10,linetype = "dashed", size = 0.2) +
font("xlab", size = 12) + font("ylab", size = 12) +
theme_classic() +
theme(axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "top")
# new_qq
# save as a pdf
ggsave("nat_neuro_qq_plot_colored.pdf",dpi = 300, width = 4, height = 3.5)
new_qq <- ggplot(qs,aes(x = Control, y= AD, colour = Quantile)) + geom_point(size = 1) +
coord_fixed() +
xlim(0, 55) + ylim(0, 55)  +
scale_color_viridis(option = "D") +
# scale_fill_distiller(palette = "Spectral") +
geom_abline(intercept = 0, slope = 1, linewidth = 0.3, colour = "gray") +
geom_hline(yintercept = 10,linetype = "dashed", linewidth = 0.2) +
geom_vline(xintercept = 10,linetype = "dashed", linewidth = 0.2) +
font("xlab", size = 12) + font("ylab", linewidth = 12) +
theme_classic() +
theme(axis.title.y = element_text(linewidth = 12),
axis.title.x = element_text(linewidth = 12),
axis.text = element_text(linewidth = 10),
legend.position = "top")
new_qq <- ggplot(qs,aes(x = Control, y= AD, colour = Quantile)) + geom_point(size = 1) +
coord_fixed() +
xlim(0, 55) + ylim(0, 55)  +
scale_color_viridis(option = "D") +
# scale_fill_distiller(palette = "Spectral") +
geom_abline(intercept = 0, slope = 1, linewidth = 0.3, colour = "gray") +
geom_hline(yintercept = 10,linetype = "dashed", linewidth = 0.2) +
geom_vline(xintercept = 10,linetype = "dashed", linewidth = 0.2) +
font("xlab", size = 12) + font("ylab", linewidth = 12) +
theme_classic() +
theme(axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "top")
idis(option = "D") +
# scale_fill_distiller(palette = "Spectral") +
geom_abline(intercept = 0, slope = 1, linewidth = 0.3, colour = "gray") +
geom_hline(yintercept = 10,linetype = "dashed", linewidth = 0.2) +
geom_vline(xintercept = 10,linetype = "dashed", linewidth = 0.2) +
font("xlab", size = 12) + font("ylab", size = 12) +
theme_classic() +
theme(axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "top")
new_qq <- ggplot(qs,aes(x = Control, y= AD, colour = Quantile)) + geom_point(size = 1) +
coord_fixed() +
xlim(0, 55) + ylim(0, 55)  +
scale_color_viridis(option = "D") +
# scale_fill_distiller(palette = "Spectral") +
geom_abline(intercept = 0, slope = 1, linewidth = 0.3, colour = "gray") +
geom_hline(yintercept = 10,linetype = "dashed", linewidth = 0.2) +
geom_vline(xintercept = 10,linetype = "dashed", linewidth = 0.2) +
font("xlab", size = 12) + font("ylab", size = 12) +
theme_classic() +
theme(axis.title.y = element_text(size = 12),
axis.title.x = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "top")
# new_qq
# save as a pdf
ggsave("nat_neuro_qq_plot_colored.pdf",dpi = 300, width = 4, height = 3.5)
thresold = 10
ctr_proportion <- mean(ctr_data > thresold, na.rm=True)
ctr_proportion <- mean(ctr_data > thresold, na.rm=TRUE)
AD_proportion <- mean(AD_data > thresold, na.rm=TRUE)
# Count successes and totals for z-test
ctr_success <- sum(ctr_data > thresold)
ctr_total <- len(mtor_data, na.rm = TRUE)
ctr_total <- length(mtor_data, na.rm = TRUE)
ctr_total <- length(ctr_data, na.rm = TRUE)
ctr_success <- sum(ctr_data > thresold)
ctr_total <- length(ctr_data)
AD_success <- sum(AD_data > thresold)
AD_total <- length(AD_data)
# Perform two-proportion z-test
prop_test <- prop.test(c(ctr_success, AD_success), c(ctr_total, AD_total), alternative = "greater")
ctr_success
ctr_data
ctr_proportion
AD_proportion
max_size <- 55
ctr_subset <- ctr_data[ctr_data <= max_size]
AD_subset <- AD_data[AD_data <= max_size]
class(AD_subset)
View(qs)
View(qs)
View(new_qq)
View(new_qq)
View(df)
View(df)
length(AD_subset)
thresold = 10
ctr_proportion <- mean(ctr_subset > thresold, na.rm=TRUE)
AD_proportion <- mean(AD_subset > thresold, na.rm=TRUE)
# Count successes and totals for z-test
ctr_success <- sum(ctr_subset > thresold)
ctr_total <- length(ctr_subset)
AD_success <- sum(AD_subset > thresold)
AD_total <- length(AD_subset)
AD_total
AD_success
AD_subset > thresold
ctr_proportion
ctr_success <- sum(ctr_subset > thresold, na.rm = TRUE)
ctr_success
ctr_total <- length(ctr_subset)
ctr_total
!is.nan(ctr_subset)
!is.na(ctr_subset)
thresold = 10
ctr_proportion <- mean(ctr_subset > thresold, na.rm=TRUE)
AD_proportion <- mean(AD_subset > thresold, na.rm=TRUE)
# Count successes and totals for z-test
ctr_success <- sum(ctr_subset > thresold, na.rm = TRUE)
ctr_total <- length(!is.na(ctr_subset))
AD_success <- sum(AD_subset > thresold, na.rm = TRUE)
AD_total <- length(!is.na(AD_subset))
prop_test <- prop.test(c(ctr_success, AD_success), c(ctr_total, AD_total), alternative = "greater")
# Print results
cat("Proportion of values > 10:\n")
cat("mTOR Group: ", ctr_proportion, "\n")
cat("5XF Group: ", AD_proportion, "\n\n")
cat("Two-proportion z-test results:\n")
print(prop_test)
max_size <- 55
ctr_subset <- ctr_data[ctr_data <= max_size]
AD_subset <- AD_data[AD_data <= max_size]
# one-sided t_test
# Perform Welch's t-test (one-sided)
t_test_result <- t.test(AD_subset, ctr_subset,
alternative = "greater",  # One-sided test for mean(X) > mean(Y)
var.equal = FALSE)        # Welch's t-test
# Print the result
print(t_test_result)
q()
